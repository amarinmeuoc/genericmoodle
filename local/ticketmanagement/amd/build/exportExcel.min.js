define("local_ticketmanagement/exportExcel",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0;_exports.init=(XLSX,filesaver,blobutil)=>{const url=M.cfg.wwwroot+"/webservice/rest/server.php";document.querySelector('input[name="token"]').value;document.querySelector("#id_exportExcel").addEventListener("click",(e=>{exportToExcel(e,XLSX,filesaver,blobutil,url)}))};const exportToExcel=(e,XLSX,filesaver,blobutil,url)=>{const startdatetxt=document.querySelector("#startdate"),startdateValue=new Date(startdatetxt.value),startdate_unixTimestamp=Math.floor(startdateValue.getTime()/1e3),enddatetxt=document.querySelector("#enddate"),enddateValue=new Date(enddatetxt.value),enddate_unixTimestamp=Math.floor(enddateValue.getTime()/1e3);prepareDataToSend({startdate:startdate_unixTimestamp,enddate:enddate_unixTimestamp},url,token)},prepareDataToSend=(data,url,token)=>{const xhr=new XMLHttpRequest;xhr.open("POST",url,!0);const formData=new FormData;formData.append("wstoken",token),formData.append("wsfunction","local_ticketmanagement_get_tickets_excel"),formData.append("moodlewsrestformat","json"),formData.append("params[0][startdate]",data.startdate),formData.append("params[0][enddate]",data.enddate),setTimeout((()=>{xhr.send(formData)}),100),xhr.onload=event=>{onLoadFunction(xhr)},xhr.onloadstart=event=>{},xhr.onprogress=event=>{},xhr.onloadend=event=>{},xhr.onerror=function(){window.console.log("Solicitud fallida")}},onLoadFunction=myXhr=>{if(4===myXhr.readyState&&200===myXhr.status){const res=JSON.parse(myXhr.response);createExcelFromJSON(res,"ticketReport")}},createExcelFromJSON=(res,op)=>{let listado=[];const titles=Object.keys(res.listadoTickets[0]);listado.push(titles);const ticketsArray=res.listadoTickets.map((ticket=>[ticket.ticketnumber,ticket.category,ticket.subcategory,ticket.customer,ticket.vessel,ticket.billid,ticket.username,ticket.familyissue,formatUnixToDateTime(ticket.date),ticket.state,ticket.description,ticket.priority,ticket.assigned]));listado=listado.concat(ticketsArray);const wb=XLSX.utils.book_new(),dr=new Date,dateFile=dr.getDate(),month=dr.getMonth()+1,year=dr.getFullYear(),min=dr.getMinutes(),hour=dr.getHours();wb.Props={Title:"List of tickets",Subject:"Training program report",Author:"Alberto MarÃ­n",CreateDate:new Date(year,month-1,dateFile)},wb.SheetNames.push("TicketsReport");const ws=XLSX.utils.aoa_to_sheet(listado);wb.Sheets.TicketsReport=ws;const wbout=XLSX.write(wb,{bookType:"xlsx",type:"binary"}),nameFile="TicketsReport-".concat(dateFile,".").concat(month,".").concat(year,"-").concat(hour,".").concat(min,".xlsx");saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}),nameFile)},s2ab=s=>{const buf=new ArrayBuffer(s.length),view=new Uint8Array(buf);for(let i=0;i!=s.length;++i)view[i]=255&s.charCodeAt(i);return buf},formatUnixToDateTime=unixTimestamp=>new Date(1e3*unixTimestamp)}));

//# sourceMappingURL=exportExcel.min.js.map