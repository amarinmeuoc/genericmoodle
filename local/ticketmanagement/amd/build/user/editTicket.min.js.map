{"version":3,"file":"editTicket.min.js","sources":["../../src/user/editTicket.js"],"sourcesContent":["import ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport {add as addToast} from 'core/toast';\nimport {get_string as getString} from 'core/str';\n\nconst url=M.cfg.wwwroot+'/webservice/rest/server.php';\nconst token=document.querySelector('input[name=\"token\"]').value;\nlet eventoCat=\"\";\nlet eventoSubCat=\"\";\nlet eventoFile=\"\";\nlet eventoPriority=\"\";\nexport const init =() => {\n    \n    const tickets=document.querySelectorAll('.tickets');\n\n    tickets.forEach((node)=>{\n        node.addEventListener('click',(e)=>{\n                showTicketFormPopup(e);\n        })\n    })\n}\n\nconst showTicketFormPopup=(e)=>{\n    e.stopPropagation();\n    const ticketId=e.target.textContent.trim();\n     \n    const modalForm=new ModalForm({\n        formClass: \"\\\\local_ticketmanagement\\\\form\\\\TicketFormPopupStudent\",\n        args: {num_ticket: ticketId},\n        modalConfig: {title: `Ticket details: #${ticketId}`},\n        returnFocus:e.target\n    });\n\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e)=>{\n        \n    });\n\n    modalForm.addEventListener(modalForm.events.LOADED, (e) => {\n                \n    });\n    modalForm.show();\n}\n\nconst updateTicket = (obj,token,url)=>{\n    let xhr = new XMLHttpRequest();\n      \n      //Se prepara el objeto a enviar\n      const formData= new FormData();\n      formData.append('wstoken',token);\n      formData.append('wsfunction', 'local_ticketmanagement_edit_ticket_byUser');\n      formData.append('moodlewsrestformat', 'json');\n      formData.append('params[0][ticketid]',obj.ticketid);\n      formData.append('params[0][fileid]',obj.attachments);\n      formData.append('params[0][userid]',obj.userid);\n      \n  \n      xhr.open('POST',url,true);\n      xhr.send(formData);\n  \n      xhr.onload = (ev)=> {\n          reqHandlerUpdateTicket(xhr);\n      }\n  \n      xhr.onerror = ()=> {\n          rejectAnswer(xhr);\n      }\n  \n}\n\n\n  const reqHandlerUpdateTicket=(xhr)=>{\n    if (xhr.readyState=== 4 && xhr. status === 200){\n        if (xhr.response){\n            const response=JSON.parse(xhr.response);\n            \n            if (response){\n              window.console.log(response.ticket);\n              const ticket=response.ticket;\n            }\n        }\n      }\n  }\n\n  \n\n  \n\nconst areElementsLoaded = (selector, parentElement = document) => {\n    return new Promise((resolve) => {\n        const checkElements = () => {\n            const elements = parentElement.querySelectorAll(selector);\n            if (elements.length > 0 && Array.from(elements).every(elem => elem !== null)) {\n                resolve(elements);\n            } else {\n                requestAnimationFrame(checkElements);\n            }\n        };\n        checkElements();\n    });\n};\n"],"names":["M","cfg","wwwroot","document","querySelector","value","querySelectorAll","forEach","node","addEventListener","e","showTicketFormPopup","stopPropagation","ticketId","target","textContent","trim","modalForm","ModalForm","formClass","args","num_ticket","modalConfig","title","returnFocus","events","FORM_SUBMITTED","LOADED","show"],"mappings":"wbAKUA,EAAEC,IAAIC,QACJC,SAASC,cAAc,uBAAuBC,oBAKvC,KAEDF,SAASG,iBAAiB,YAEhCC,SAASC,OACbA,KAAKC,iBAAiB,SAASC,IACvBC,oBAAoBD,gBAK9BC,oBAAqBD,IACvBA,EAAEE,wBACIC,SAASH,EAAEI,OAAOC,YAAYC,OAE9BC,UAAU,IAAIC,mBAAU,CAC1BC,UAAW,yDACXC,KAAM,CAACC,WAAYR,UACnBS,YAAa,CAACC,iCAA2BV,WACzCW,YAAYd,EAAEI,SAGlBG,UAAUR,iBAAiBQ,UAAUQ,OAAOC,gBAAiBhB,QAI7DO,UAAUR,iBAAiBQ,UAAUQ,OAAOE,QAASjB,QAGrDO,UAAUW"}