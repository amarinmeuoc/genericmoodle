{"version":3,"file":"exportExcel.min.js","sources":["../../src/usermanagement/exportExcel.js"],"sourcesContent":["\nexport const init=(XLSX, filesaver,blobutil)=>{\n    //definicion de url\n    const url=M.cfg.wwwroot+'/webservice/rest/server.php';\n    const token=document.querySelector('input[name=\"token\"]').value;\n    const boexport=document.querySelector('#id_exportExcel');\n    boexport.addEventListener('click',(e)=>{\n        exportToExcel(e,XLSX,filesaver,blobutil, url);\n        \n    });\n}\n\nconst exportToExcel=(e,XLSX,filesaver,blobutil, url)=>{\n    \n    const newPage=document.querySelector('input[name=\"page\"]');\n        newPage.value=1;\n        const orderby = document.querySelector('input[name=\"orderby\"]').value;\n        const order = document.querySelector('input[name=\"order\"]').value;\n        const groupid = document.querySelector('#id_vessel').value;\n        const customerid= document.querySelector('#id_project').value;\n        const billid=document.querySelector('#tebillid').value;\n        const nombre=document.querySelector('#tenombre').value;\n        const apellidos=document.querySelector('#teapellidos').value;\n                \n        const obj={\n          activePage:1,\n          order:order,\n          orderby:orderby,\n          page:newPage.value,\n          groupid:groupid,\n          customerid:customerid,\n          billid:billid,\n          nombre:nombre,\n          apellidos:apellidos\n        }\n\n    prepareDataToSend(obj, url,token);\n}\n\nconst prepareDataToSend=(obj, url,token)=>{\n    let xhr = new XMLHttpRequest();\n\n    const service= 'local_ticketmanagement_get_list_users';\n\n    //Se prepara el objeto a enviar\n    const formData= new FormData();\n    formData.append('wstoken',token);\n    formData.append('wsfunction', service);\n    formData.append('moodlewsrestformat', 'json');\n    formData.append('params[0][customerid]',obj.customerid);\n    formData.append('params[0][groupid]',obj.groupid);\n    formData.append('params[0][order]',obj.order);\n    formData.append('params[0][orderby]',obj.orderby);\n    formData.append('params[0][page]',obj.page);\n    formData.append('params[0][activePage]',obj.activePage);\n    if ('billid' in obj){\n      formData.append('params[0][billid]',obj.billid);\n    }\n    if ('nombre' in obj){\n      formData.append('params[0][firstname]',obj.nombre);\n    }\n    if ('apellidos' in obj){\n      formData.append('params[0][lastname]',obj.apellidos);\n    }\n    \n    \n    xhr.open('POST',url,true);\n    \n\n    setTimeout(()=>{\n        xhr.send(formData);\n    },100);\n\n    xhr.onload = (ev)=> {\n        onLoadFunction(xhr);\n    }\n\n    xhr.onloadstart=(event)=>{\n        //self.showLoader(event);\n        }\n\n    xhr.onprogress = (event)=>{\n        //self.onProgressFunction(event);\n    } \n    xhr.onloadend=(event)=>{\n        //self.hideLoader(event);\n    }\n\n    xhr.onerror = ()=> {\n        //self.rejectAnswer(xhr);\n    }\n\n}\n\nconst onLoadFunction=(myXhr)=>{\n   \n    if (myXhr.readyState===4 && myXhr.status===200){\n        const res=JSON.parse(myXhr.response);\n        createExcelFromJSON(res,'userReport');\n        \n    }\n}\n\nconst onProgressFunction=(event) =>{\n    console.log(`Uploaded ${event.loaded} of ${event.total}`);\n    const loader=document.querySelector('.loader');\n    loader.classList.remove('.hide');\n    loader.classList.add('.show');\n}\n\nconst createExcelFromJSON = (res, op) => {\n    let listado = [];\n    \n    if (res.userlist && res.userlist.length>0){\n        // Generar títulos basados en las claves del primer objeto\n        const titles = Object.keys(res.userlist[0]);\n        listado.push(titles);\n\n        // Convertir cada objeto a un array de valores y añadirlo al listado\n        const usersArray = res.userlist.map(user => [\n            user.id,\n            user.vessel,\n            user.billid,\n            user.email,\n            user.personalemail,\n            user.firstname,\n            user.lastname,\n            user.phone1,\n            user.phone2,\n            user.address,\n            user.city,\n            formatUnixToDateTime(user.birthdate),\n            formatUnixToDateTime(user.arrival_date),\n            formatUnixToDateTime(user.departure_date),\n            user.insurance_card_number,\n            user.shoesize,\n            user.overallsize,\n            user.notes,\n            user.iffamily\n        ]);\n        listado = listado.concat(usersArray);\n    }\n    \n\n    // Crear un nuevo libro de Excel\n    const wb = XLSX.utils.book_new();\n    const dr = new Date();\n    const dateFile = dr.getDate();\n    const month = dr.getMonth() + 1;\n    const year = dr.getFullYear();\n    const min = dr.getMinutes();\n    const hour = dr.getHours();\n\n    // Configuración de propiedades del archivo\n    wb.Props = {\n        Title: \"List of users\",\n        Subject: \"Training program report\",\n        Author: \"Alberto Marín\",\n        CreateDate: new Date(year, month - 1, dateFile) // Ajuste del mes a base 0\n    };\n\n    // Añadir una hoja de Excel con el nombre \"UsersReport\"\n    wb.SheetNames.push(\"UsersReport\");\n    const ws = XLSX.utils.aoa_to_sheet(listado);\n    wb.Sheets[\"UsersReport\"] = ws;\n\n    // Generar y descargar el archivo\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\n    const nameFile = `UsersReport-${dateFile}.${month}.${year}-${hour}.${min}.xlsx`;\n    saveAs(new Blob([s2ab(wbout)], { type: \"application/octet-stream\" }), nameFile);\n};\n\n// Función auxiliar para convertir la cadena de datos binarios a ArrayBuffer\nconst s2ab = (s) => {\n    const buf = new ArrayBuffer(s.length);\n    const view = new Uint8Array(buf);\n    for (let i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n    return buf;\n};\n\nconst formatUnixToDateTime = (unixTimestamp) => {\n    let date='';\n    if(unixTimestamp!==0){\n        date = new Date(unixTimestamp * 1000); // Convertir de segundos a milisegundos\n        date.setDate(date.getDate() + 1); // Sumar un día\n    }\n    return date;\n};\n\n"],"names":["XLSX","filesaver","blobutil","url","M","cfg","wwwroot","document","querySelector","value","addEventListener","e","exportToExcel","newPage","orderby","order","groupid","customerid","billid","nombre","apellidos","obj","activePage","page","prepareDataToSend","token","xhr","XMLHttpRequest","formData","FormData","append","open","setTimeout","send","onload","ev","onLoadFunction","onloadstart","event","onprogress","onloadend","onerror","myXhr","readyState","status","res","JSON","parse","response","createExcelFromJSON","op","listado","userlist","length","titles","Object","keys","push","usersArray","map","user","id","vessel","email","personalemail","firstname","lastname","phone1","phone2","address","city","formatUnixToDateTime","birthdate","arrival_date","departure_date","insurance_card_number","shoesize","overallsize","notes","iffamily","concat","wb","utils","book_new","dr","Date","dateFile","getDate","month","getMonth","year","getFullYear","min","getMinutes","hour","getHours","Props","Title","Subject","Author","CreateDate","SheetNames","ws","aoa_to_sheet","Sheets","wbout","write","bookType","type","nameFile","saveAs","Blob","s2ab","s","buf","ArrayBuffer","view","Uint8Array","i","charCodeAt","unixTimestamp","date","setDate"],"mappings":"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"}