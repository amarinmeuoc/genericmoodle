{"version":3,"file":"funciones_comunes.min.js","sources":["../src/funciones_comunes.js"],"sourcesContent":["define(['core/modal','core/templates','core_form/modalform','core/toast'],function(ModalFactory,Templates,ModalForm,addToast) {\n    let eventoCat=\"\";\n    let eventoSubCat=\"\";\n    let eventoFile=\"\";\n    let eventoPriority=\"\";\n    return {\n        truncateArrayWithActiveMiddle: function(arr,maxLength){\n            const activeIndex = arr.indexOf(arr.find(item => item.active)); // Combine find and indexOf\n            // Handle cases where there's no active element or less than maxLength elements\n            if (activeIndex === -1 || arr.length <= maxLength) {\n            return arr;\n            }\n        \n            // Similar logic to calculate before and after lengths\n            const halfLength = Math.floor(maxLength / 2);\n            const beforeLength = Math.min(halfLength, activeIndex);\n            const afterLength = Math.min(halfLength, arr.length - activeIndex - 1);\n        \n            // Use a loop to iterate and build the truncated array\n            const truncatedArray = [];\n            for (let i = activeIndex - beforeLength; i <= activeIndex + afterLength; i++) {\n            if (i >= 0 && i < arr.length) { // Ensure we stay within array bounds\n                truncatedArray.push(arr[i]);\n            }\n            }\n        \n            return truncatedArray;\n        },\n        areElementsLoaded: function (selector, parentElement = document) {\n            return new Promise((resolve) => {\n                const checkElements = () => {\n                    const elements = parentElement.querySelectorAll(selector);\n                    if (elements.length > 0 && Array.from(elements).every(elem => elem !== null)) {\n                        resolve(elements);\n                    } else {\n                        requestAnimationFrame(checkElements);\n                    }\n                };\n                checkElements();\n            });\n        },\n        truncateDateToDay:function(date) {\n            // Create a new Date object with the year, month, and date from the input date.\n            const truncatedDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n        \n            // Convert the truncated date to Unix time (milliseconds since the Unix epoch).\n            const unixTime = truncatedDate.getTime() / 1000; // Divide by 1000 to get seconds\n        \n            return unixTime;\n        },\n        getFirstAndLastDayOfCurrentWeek:function(){\n            const today = new Date();\n            const dayOfWeek = today.getDay(); // 0 (Sunday) to 6 (Saturday)\n\n            // Calculate the first day of the week (Monday)\n            const firstDayOfWeek = new Date(today);\n            firstDayOfWeek.setDate(today.getDate() - dayOfWeek );\n\n            // Calculate the last day of the week (Sunday)\n            const lastDayOfWeek = new Date(firstDayOfWeek);\n            lastDayOfWeek.setDate(lastDayOfWeek.getDate() + 6);\n\n            return { firstDayOfWeek, lastDayOfWeek };\n        },\n        loadTemplateFromResponse: function(response){\n            const self=this; //Mantener el contexto\n            const role = document.querySelector('input[name=\"role\"]').value;\n            const template=(role==='student')?'local_ticketmanagement/content_user-ajax':'local_ticketmanagement/content_log-ajax'\n            //Render the choosen mustache template by Javascript\n            Templates.renderForPromise(template,response)\n            .then(({html,js})=>{\n                const content=document.querySelector('#content');\n                content.innerHTML='';\n                Templates.appendNodeContents(content,html,js);\n                \n                //Ahora que se ha cargado la plantilla, se puede añadir el evento a los enlaces de ordenación\n                const orderlinks=document.querySelectorAll('.orderby');\n                orderlinks.forEach((link)=>{\n                    link.addEventListener('click',(ev)=>{\n                        ev.preventDefault();\n                \n                        //Se obtienen los valores de los campos necesarios\n                        const token = document.querySelector('input[name=\"token\"]');\n                        const page= document.querySelector('input[name=\"page\"]');\n                \n                        //Obtenemos el ordenamiento y el campo de orden actuales\n                        const orderby = document.querySelector('input[name=\"orderby\"]');\n                        const order = document.querySelector('input[name=\"order\"]');\n                        \n                \n                        //Si el campo de ordenamiento es el mismo que el actual, se cambia el orden\n                        if (ev.target.dataset.activo==='activo'){\n                            if (order.value==='1'){\n                                ev.target.dataset.order=0;\n                                order.value=0;\n                            } else {\n                                ev.target.dataset.order=1;\n                                order.value=1;\n                            }\n                        } else {\n                            orderlinks.forEach((link)=>{\n                                link.dataset.activo='';\n                            });\n                            ev.target.dataset.activo='activo';\n                            orderby.value=ev.target.dataset.orderby;\n                            ev.target.dataset.order=1;\n                            order.value=1;\n                        }\n                \n                        const activePage=document.querySelector('li.page-item.active>a').textContent.trim();\n                \n                        const startdate= document.querySelector('#startdate');\n                        const enddate= document.querySelector('#enddate');\n                \n                        \n\n                        if (role==='controller'){\n                            const startdateUnixFormat=this.truncateDateToDay(new Date(startdate.value));\n                            const enddateUnixFormat=this.truncateDateToDay(new Date(enddate.value));\n                            const selstate=document.querySelector('#id_state').value;\n                            const gestorvalue=document.querySelector('#id_logistic').value;\n                            const obj={\n                                activePage:1,\n                                firstDayOfWeek:startdateUnixFormat,\n                                lastDayOfWeek:enddateUnixFormat,\n                                order:parseInt(order.value),\n                                orderby:orderby.value,\n                                page:1,\n                                state:selstate,\n                                gestor:gestorvalue\n                              }\n                            self.requestDataToServer(obj, token.value, url,role);\n                        } else if (role==='student'){\n                            const userid=document.querySelector('input[name=\"user\"]').value;\n                            const obj={\n                                activePage:1,\n                                userid:userid,\n                                order:order.value,\n                                orderby:orderby.value,\n                                page:1,\n                              }\n                            self.requestDataToServer(obj, token.value, url,role);\n                        }\n                        \n                    });\n                });\n            \n                const pages=document.querySelectorAll('.page-link');\n                pages.forEach((page)=>{\n                    page.addEventListener('click',(ev)=>{\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                        const token = document.querySelector('input[name=\"token\"]');\n                        const page= document.querySelector('input[name=\"page\"]');\n                \n                        //Se obtiene el elemento padre del elemento clicado\n                        const padre=ev.currentTarget.parentElement;\n                        \n                        if (padre.dataset.control==='first' || padre.dataset.control==='last' || padre.dataset.control==='previous' || padre.dataset.control==='next'){\n                        //Si es la primera página se coge el valor de arial-label\n                        page.value=ev.currentTarget.getAttribute('aria-label');\n                        } else {\n                        page.value=ev.currentTarget.textContent.trim();\n                        }\n                        \n                        //Obtenemos el ordenamiento y el campo de orden actuales\n                        const orderby = document.querySelector('input[name=\"orderby\"]').value;\n                        const order = document.querySelector('input[name=\"order\"]').value;\n                        const activePage=parseInt(page.value);\n                        const startdate= document.querySelector('#startdate');\n                        const enddate= document.querySelector('#enddate');\n                        //const role = document.querySelector('input[name=\"role\"]').value;\n                \n                        \n                        \n                        if (role==='controller'){\n                            const startdateUnixFormat=this.truncateDateToDay(new Date(startdate.value));\n                            const enddateUnixFormat=this.truncateDateToDay(new Date(enddate.value));\n                            const selstate=document.querySelector('#id_state').value;\n                            const gestorvalue=document.querySelector('#id_logistic').value;\n                            const obj={\n                                activePage:activePage,\n                                firstDayOfWeek:startdateUnixFormat,\n                                lastDayOfWeek:enddateUnixFormat,\n                                order:parseInt(order),\n                                orderby:orderby,\n                                page:parseInt(page.value),\n                                state:selstate,\n                                gestor:gestorvalue\n                              }\n                              self.requestDataToServer(obj, token.value, url,role);\n                        } else if (role==='student'){\n                            const userid=document.querySelector('input[name=\"user\"]').value;\n                            const obj={\n                                activePage:activePage,\n                                userid:userid,\n                                order:order,\n                                orderby:orderby,\n                                page:parseInt(page.value),\n                              }\n                              self.requestDataToServer(obj, token.value, url,role);\n                        }\n                        \n                \n                        \n                    });\n                });\n\n                const chk_communication=document.querySelectorAll(\"#tablebody input[type='checkbox']\");\n\n                chk_communication.forEach((chk)=>{\n                    chk.addEventListener('click',(e)=>{\n                    const ticket=e.target.dataset.ticketid;\n                    const value=(e.target.checked)?1:0;\n                    const token = document.querySelector('input[name=\"token\"]').value;\n                    this.updateCommunication(ticket,value,token,url);\n                    })\n                })\n            \n            })\n            .catch((error)=>displayException(error));\n  \n        },\n        reqHandlerGetTickets: function(xhr){\n            if (xhr.readyState=== 4 && xhr. status === 200){\n              if (xhr.response){\n                  const response=JSON.parse(xhr.response);\n                  response.pages=this.truncateArrayWithActiveMiddle(response.pages,8);\n                  this.loadTemplateFromResponse(response);\n                  window.console.log(response);\n              }\n            }\n        },\n        requestDataToServer: function (obj,token,url,role){\n                \n                const self=this; // Usar self para conservar el contexto en xhr.onload\n                let xhr = new XMLHttpRequest();\n\n                const service= (role==='student')?'local_ticketmanagement_get_tickets_byUserId':'local_ticketmanagement_get_tickets';\n\n                //Se prepara el objeto a enviar\n                const formData= new FormData();\n                formData.append('wstoken',token);\n                formData.append('wsfunction', service);\n                formData.append('moodlewsrestformat', 'json');\n                if (role==='student'){\n                    formData.append('params[0][order]',obj.order);\n                    formData.append('params[0][orderby]',obj.orderby);\n                    formData.append('params[0][page]',obj.page);\n                    formData.append('params[0][userid]',obj.userid);\n                    formData.append('params[0][activePage]',obj.activePage);\n                }else if(role==='controller') {\n                    formData.append('params[0][order]',obj.order);\n                    formData.append('params[0][orderby]',obj.orderby);\n                    formData.append('params[0][page]',obj.page);\n                    formData.append('params[0][startdate]',obj.firstDayOfWeek);\n                    formData.append('params[0][enddate]',obj.lastDayOfWeek);\n                    formData.append('params[0][activePage]',obj.activePage);\n                    formData.append('params[0][state]',obj.state);\n                    formData.append('params[0][gestor]',obj.gestor);\n                }\n                \n                xhr.open('POST',url,true);\n                //xhr.send(formData);\n\n                setTimeout(()=>{\n                    xhr.send(formData);\n                },100);\n            \n                xhr.onload = (ev)=> {\n                    self.reqHandlerGetTickets(xhr);\n                }\n\n                xhr.onloadstart=(event)=>{\n                    self.showLoader(event);\n                  }\n            \n                xhr.onprogress = (event)=>{\n                    self.onProgressFunction(event);\n                } \n                xhr.onloadend=(event)=>{\n                    self.hideLoader(event);\n                }\n            \n                xhr.onerror = ()=> {\n                    self.rejectAnswer(xhr);\n                }\n        },\n\n        showLoader: function (event){\n            const loader=document.querySelector('.loader');\n            const table=document.querySelector('.generaltable');\n            loader.classList.remove('hide');\n            loader.classList.add('show');\n            table.classList.add('hide');\n            const bosearch=document.querySelector('#id_bosearchdate');\n            const bosearchbyID=document.querySelector('#id_bosearchbyid');\n            if (bosearch)\n                bosearch.disabled=true;\n            if (bosearchbyID)\n                bosearchbyID.disabled=true;\n            \n          },\n          \n          hideLoader:function(event){\n            const loader=document.querySelector('.loader');\n            const table=document.querySelector('.generaltable');\n            loader.classList.remove('show');\n            loader.classList.add('hide');\n            table.classList.remove('hide');\n            const bosearch=document.querySelector('#id_bosearchdate');\n            const bosearchbyID=document.querySelector('#id_bosearchbyid');\n            if (bosearch)\n                bosearch.disabled=false;\n            if (bosearchbyID)\n                bosearchbyID.disabled=false;\n          },\n      \n          onProgressFunction:function(event) {\n            console.log(`Uploaded ${event.loaded} of ${event.total}`);\n            const loader=document.querySelector('.loader');\n            loader.classList.remove('.hide');\n            loader.classList.add('.show');\n        },\n        showTicketFormPopup: function (e,role){\n            const self=this;\n            e.stopPropagation();\n            const ticketId=e.target.textContent.trim();\n            const formpopup=(role==='controller')?\"TicketFormPopup\":\"TicketFormPopupStudent\";\n            window.console.log(role);\n            const modalForm=new ModalForm({\n                formClass: `\\\\local_ticketmanagement\\\\form\\\\${formpopup}`,\n                args: {num_ticket: ticketId},\n                modalConfig: {title: `Ticket details: #${ticketId}`},\n                returnFocus:e.target\n            });\n    \n            modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e)=>{\n                //Se actualiza la pagina principal con los nuevos valores y se envia email de notificación\n                const formElement=e.target;\n                const subcategoryValue = formElement.querySelector('select[name=\"subcategory\"]')?.value;\n                window.console.log(e.detail); \n                //Se captura el valor subcategory porque como campo de formulario aparece la categoria, pero no la subcategoria\n                if (subcategoryValue) {\n                    e.detail.subcategory = subcategoryValue;\n                } \n    \n                if (role==='controller'){\n                    self.updateTicket(e.detail,token,url,role);\n                }\n                \n            });\n    \n            modalForm.addEventListener(modalForm.events.LOADED, (e) => {\n                const self=this;\n                // Obtener el formulario modal después de que se ha cargado\n                const formElement = e.target;\n            \n                // Usa la función areElementsLoaded para esperar hasta que los selectores estén cargados en el DOM\n                self.areElementsLoaded('select[name=\"category\"], select[name=\"subcategory\"]', formElement).then((elements) => {\n                    \n                    // Una vez que los selectores están disponibles, los seleccionamos\n                    const categorySelect = formElement.querySelector('select[name=\"category\"]');\n                    const subcategorySelect = formElement.querySelector('select[name=\"subcategory\"]');\n                    const priority=formElement.querySelector('select[name=\"priority\"]');\n                    priority.addEventListener('change',(e)=>{\n                        eventoPriority=e.target.value\n                    })\n            \n                    // Asegúrate de que ambos selectores existen\n                    if (categorySelect && subcategorySelect) {\n                        // Añadir un listener para cuando cambie la categoría seleccionada\n                        categorySelect.addEventListener('change', (event) => {\n                            const selectedCategory = event.target.value;\n                            window.console.log(`Categoría seleccionada: ${selectedCategory}`);\n                            eventoCat=event.target.selectedOptions[0].text;\n                            \n                            // Lógica para actualizar las opciones del selector de subcategorías\n                            self.updateSubcategory(selectedCategory, subcategorySelect,token);\n                        });\n    \n                        subcategorySelect.addEventListener('change',(e)=>{\n                            eventoSubCat=e.target.selectedOptions[0].text;\n                        })\n                    } else {\n                        window.console.error('Los selectores de categoría y subcategoría no están disponibles.');\n                    }\n                    \n                    if (role==='controller'){\n                        const closebox=formElement.querySelector(\"input[type='checkbox'][name='close']\");\n                        const cancelledbox=formElement.querySelector(\"input[type='checkbox'][name='cancelled']\");\n                        const bosave=formElement.querySelector(\".btn-primary\");\n                        \n                        if (closebox.checked){\n                        bosave.disabled=true;\n                        closebox.disabled=true;\n                        }\n        \n        \n                        if (cancelledbox.checked){\n                        bosave.disabled=true;\n                        cancelledbox.disabled=true;\n                        }\n                    }\n                    \n    \n    \n                    \n                }).catch((error) => {\n                    window.console.error('Error al cargar los elementos select:', error);\n                });\n            });\n            modalForm.show();\n        },\n        updateTicket: function (obj,token,url,role) {\n            const self=this;\n            let xhr = new XMLHttpRequest();\n            const service=(role==='controller')?'local_ticketmanagement_edit_ticket':'local_ticketmanagement_edit_ticket_byUser';\n            //Se prepara el objeto a enviar\n            const formData= new FormData();\n            formData.append('wstoken',token);\n            formData.append('wsfunction', service);\n            formData.append('moodlewsrestformat', 'json');\n            formData.append('params[0][ticketid]',obj.ticketid);\n            formData.append('params[0][fileid]',obj.attachments);\n            formData.append('params[0][cancelled]',obj.cancelled);\n            formData.append('params[0][state]',obj.hiddenstate);\n            formData.append('params[0][priority]',obj.priority);\n            formData.append('params[0][closed]',obj.close);\n            formData.append('params[0][category]',obj.subcategory);\n            formData.append('params[0][eventoCat]',eventoCat);\n            formData.append('params[0][eventoSubCat]',eventoSubCat);\n            formData.append('params[0][eventoPriority]',eventoPriority);\n        \n            xhr.open('POST',url,true);\n            xhr.send(formData);\n        \n            xhr.onload = (ev)=> {\n                self.reqHandlerUpdateTicket(xhr);\n            }\n        \n            xhr.onerror = ()=> {\n                rejectAnswer(xhr);\n            }\n        \n        },\n        reqHandlerUpdateTicket: function(xhr){\n            if (xhr.readyState=== 4 && xhr. status === 200){\n                if (xhr.response){\n                    const response=JSON.parse(xhr.response);\n                    \n                    if (response){\n                    window.console.log(response.ticket);\n                    const ticket=response.ticket;\n                    this.updateTemplate(ticket);\n                    }\n                    \n                }\n            }\n        },\n        updateTemplate: function(ticket){\n            const fila = document.querySelector(`#${ticket.ticketid}`);\n            const state = fila.querySelector('td:nth-child(6)');\n            const priority = fila.querySelector('td:nth-child(8)');\n            state.textContent=ticket.state;\n            priority.textContent=ticket.priority;\n            window.console.log(\"edicion...\");\n            if (ticket.state==='Closed' || ticket.state==='Cancelled'){\n                fila.classList.add(\"cerrado\");\n                const boAssigment=fila.querySelector('.assignbtn');\n                boAssigment.addEventListener(\"click\", (event) => {\n                    event.stopPropagation(); // Detener la propagación del evento\n                    event.preventDefault();  // Prevenir cualquier acción predeterminada\n                });\n                // Opcional: cambiar el cursor a \"not-allowed\" para indicar que no es clickeable\n                boAssigment.style.cursor = \"not-allowed\";\n            }\n    \n        },\n        updateSubcategory: function(categoryid,subcategorySelect, token){\n            const self=this;\n            let xhr = new XMLHttpRequest();\n            \n            //Se prepara el objeto a enviar\n            const formData= new FormData();\n            formData.append('wstoken',token);\n            formData.append('wsfunction', 'local_ticketmanagement_load_subcategories');\n            formData.append('moodlewsrestformat', 'json');\n            formData.append('params[0][categoryid]',categoryid);\n            formData.append('params[0][role]','controller');\n        \n            xhr.open('POST',url,true);\n            xhr.send(formData);\n        \n            xhr.onload = (ev)=> {\n                self.reqHandlerLoadSubcategories(xhr, subcategorySelect);\n            }\n        \n            xhr.onerror = ()=> {\n                rejectAnswer(xhr);\n            }\n        },\n        reqHandlerLoadSubcategories: function(xhr,subcategorySelect){\n            if (xhr.readyState=== 4 && xhr. status === 200){\n                if (xhr.response){\n                    const response=JSON.parse(xhr.response);\n                    const selsubcategory=subcategorySelect;\n                    if (response){\n                        selsubcategory.innerHTML='';\n                        const optionsSubcategories = response;\n                        \n            \n                        optionsHTML='';\n                        optionsSubcategories.forEach(optionData=>{\n                            optionsHTML += `<option value=\"${optionData.id}\">${optionData.subcategory}</option>`;\n                        })\n                        selsubcategory.innerHTML = optionsHTML;\n                    }\n                    \n                }\n            }\n        },\n\n        updateCommunication: function(ticketid, value, token, url){\n            const self=this;\n            let xhr = new XMLHttpRequest();\n            const service='local_ticketmanagement_update_ticket_communication';\n            //Se prepara el objeto a enviar\n            const formData= new FormData();\n            formData.append('wstoken',token);\n            formData.append('wsfunction', service);\n            formData.append('moodlewsrestformat', 'json');\n            formData.append('params[0][ticketid]',ticketid);\n            formData.append('params[0][value]',value);\n            \n        \n            xhr.open('POST',url,true);\n            xhr.send(formData);\n        \n            xhr.onload = (ev)=> {\n                self.reqHandlerUpdateCommunication(xhr);\n            }\n        \n            xhr.onerror = ()=> {\n                rejectAnswer(xhr);\n            }\n        },\n\n        reqHandlerUpdateCommunication: function(xhr){\n            if (xhr.readyState=== 4 && xhr. status === 200){\n                if (xhr.response){\n                    const response=JSON.parse(xhr.response);\n                    window.console.log(response);\n                    addToast.add(`Now user attached to the ticket: ${response.ticket.ticketid} is ${response.ticket.communication === true ? 'allowed' : 'not allowed'} to update messages in the ticket.`);\n\n                    \n                }\n            }\n        },\n\n        reqHandlerLoadActions: function(xhr) {\n            if (xhr.readyState === 4 && xhr.status === 200) {\n                if (xhr.response) {\n                    const response = JSON.parse(xhr.response);\n                    if (!response.allowfeedback)\n                        this.loadActionsTemplate(response.result);\n                    else\n                        this.showTicketActionsWithFeedback(response.result)\n        \n                    window.console.log(response);\n                }\n            }\n        },\n        loadActionsTemplate: function (response){\n            const modalContent = `\n              <div class=\"modal-body\">\n                <p>This is the list of actions ordered by date</p>\n            </div>\n            <div class=\"table-responsive\" style=\"max-height:300px\">\n                <table class=\"generaltable table-sm\">\n                    <thead>\n                        <tr>\n                            <th>Date</th>\n                            <th>Task</th>\n                            <th>Done by</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ` + \n                        response.map(action => {\n                            \n                            return `\n                                <tr>\n                                    <td>${action.dateaction}</td>\n                                    <td>${action.action}</td>\n                                    <td>${action.user}</td>\n                                </tr>\n                            `;\n                        }).join('') + // Unir todas las filas generadas\n                        `</tbody>\n                </table>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-primary\" data-action=\"confirm\">Accept</button>\n            </div>`;\n        \n            ModalFactory.create({\n                title: 'Actions history',\n                body: modalContent,\n                size: 'modal-xl'\n            }).then(modal => {\n                window.console.log(modal);\n                // Manejar el clic en Aceptar\n                modal.getRoot()[0].querySelector('[data-action=\"confirm\"]').onclick = function() {\n                    \n                    modal.hide(); // Cierra el modal\n                };\n                modal.show(); // Muestra el modal\n            });\n        },\n        \n        \n        showTicketActionsWithFeedback:function (arr){\n            const ticketId=arr[0].ticketid;\n            const modalForm=new ModalForm({\n                formClass: \"\\\\local_ticketmanagement\\\\form\\\\ActionsFormPopup\",\n                args: {num_ticket: ticketId,role:'student'},\n                modalConfig: {title: `Ticket details: #${ticketId}`},\n                returnFocus:e.target\n            });\n        \n            modalForm.show();\n        \n            modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e)=>{\n                //Se actualiza la pagina principal con los nuevos valores y se envia email de notificación\n                addToast.add(`Ticket: ${e.detail.hiddenticketid} has been updated. Your message has been recieved by the support team.`);\n            });\n        \n            // Listen for the modal LOADED event\n            modalForm.addEventListener(modalForm.events.LOADED, (e) => {\n                // Get the button after the modal is fully loaded\n                // Get the modal element after it is loaded\n                const formElement=e.target;\n        \n                this.areElementsLoaded('button[name=\"boExcel\"],input[name=\"description\"],input[name=\"state\"]', formElement).then((elements) => {\n                    const state=formElement.querySelector('input[name=\"state\"]').value;\n        \n                    if (state==='Cancelled' || state==='Closed'){\n                        const teDescription=formElement.querySelector('input[name=\"description\"]');\n                        teDescription.disabled=true;\n                        const boSave=formElement.querySelector('button[data-action=\"save\"]');\n                        boSave.disabled=true;\n                    }\n                    \n                    const boexport=formElement.querySelector('button[name=\"boExcel\"]');\n                    //boexport.remove();\n                }).catch((error) => {\n                    window.console.error('Error al cargar los elementos:', error);\n                });\n            });\n        }\n    }\n})"],"names":["define","ModalFactory","Templates","ModalForm","addToast","eventoCat","eventoSubCat","eventoPriority","truncateArrayWithActiveMiddle","arr","maxLength","activeIndex","indexOf","find","item","active","length","halfLength","Math","floor","beforeLength","min","afterLength","truncatedArray","i","push","areElementsLoaded","selector","parentElement","document","Promise","resolve","checkElements","elements","querySelectorAll","Array","from","every","elem","requestAnimationFrame","truncateDateToDay","date","Date","getFullYear","getMonth","getDate","getTime","getFirstAndLastDayOfCurrentWeek","today","dayOfWeek","getDay","firstDayOfWeek","setDate","lastDayOfWeek","loadTemplateFromResponse","response","self","this","role","querySelector","value","template","renderForPromise","then","_ref","html","js","content","innerHTML","appendNodeContents","orderlinks","forEach","link","addEventListener","ev","preventDefault","token","orderby","order","target","dataset","activo","textContent","trim","startdate","enddate","startdateUnixFormat","enddateUnixFormat","selstate","gestorvalue","obj","activePage","parseInt","page","state","gestor","requestDataToServer","url","userid","stopPropagation","padre","currentTarget","control","getAttribute","chk","e","ticket","ticketid","checked","updateCommunication","catch","error","displayException","reqHandlerGetTickets","xhr","readyState","status","JSON","parse","pages","window","console","log","XMLHttpRequest","service","formData","FormData","append","open","setTimeout","send","onload","onloadstart","event","showLoader","onprogress","onProgressFunction","onloadend","hideLoader","onerror","rejectAnswer","loader","table","classList","remove","add","bosearch","bosearchbyID","disabled","loaded","total","showTicketFormPopup","ticketId","formpopup","modalForm","formClass","args","num_ticket","modalConfig","title","returnFocus","events","FORM_SUBMITTED","subcategoryValue","_formElement$querySel","detail","subcategory","updateTicket","LOADED","formElement","categorySelect","subcategorySelect","selectedCategory","selectedOptions","text","updateSubcategory","closebox","cancelledbox","bosave","show","attachments","cancelled","hiddenstate","priority","close","reqHandlerUpdateTicket","updateTemplate","fila","boAssigment","style","cursor","categoryid","reqHandlerLoadSubcategories","selsubcategory","optionsHTML","optionData","id","reqHandlerUpdateCommunication","communication","reqHandlerLoadActions","allowfeedback","showTicketActionsWithFeedback","result","loadActionsTemplate","modalContent","map","action","dateaction","user","join","create","body","size","modal","getRoot","onclick","hide","hiddenticketid"],"mappings":"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"}