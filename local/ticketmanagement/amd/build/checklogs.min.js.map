{"version":3,"file":"checklogs.min.js","sources":["../src/checklogs.js"],"sourcesContent":["define([\n    'core_form/modalform',\n    'local_ticketmanagement/funciones_comunes',\n    'core/toast'\n], function(ModalForm, funcionesComunes, addToast){\n    const url=M.cfg.wwwroot+'/webservice/rest/server.php';\n    const token=document.querySelector('input[name=\"token\"]').value;\n    const init =() => {\n        \n        const logs=document.querySelectorAll('.logs');\n    \n        logs.forEach((node)=>{\n            node.addEventListener('click',(e)=>{\n                showTicketActions(e);\n            })\n        })\n    }\n    \n    const showTicketActions=(e)=>{\n        e.stopPropagation();\n        const ticketId=e.target.dataset.ticketid;\n        const modalForm=new ModalForm({\n            formClass: \"\\\\local_ticketmanagement\\\\form\\\\ActionsFormPopup\",\n            args: {num_ticket: ticketId},\n            modalConfig: {title: `Ticket details: #${ticketId}`},\n            returnFocus:e.target\n        });\n    \n        modalForm.show();\n   \n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e)=>{\n            //Se actualiza la pagina principal con los nuevos valores y se envia email de notificación\n            addToast.add(`Ticket: ${e.detail.hiddenticketid} has been updated.`);\n        });\n    \n        // Listen for the modal LOADED event\n        modalForm.addEventListener(modalForm.events.LOADED, (e) => {\n            // Get the button after the modal is fully loaded\n            // Get the modal element after it is loaded\n            const formElement=e.target;\n     \n            funcionesComunes.areElementsLoaded('button[name=\"boExcel\"],input[name=\"description\"],input[name=\"state\"]', formElement).then((elements) => {\n                const state=formElement.querySelector('input[name=\"state\"]').value;\n\n                if (state==='Cancelled' || state==='Closed'){\n                    const teDescription=formElement.querySelector('input[name=\"description\"]');\n                    teDescription.disabled=true;\n                    const boSave=formElement.querySelector('button[data-action=\"save\"]');\n                    boSave.disabled=true;\n                }\n                \n                const boexport=formElement.querySelector('button[name=\"boExcel\"]');\n                boexport.addEventListener('click',(e)=>{\n                    const ticketDiv=formElement.querySelector('div[data-name=\"ticketid\"]');\n                    const ticketid=ticketDiv.textContent.trim();\n                    loadActions(ticketid,url,token);\n                })\n            }).catch((error) => {\n                window.console.error('Error al cargar los elementos select:', error);\n            });\n        });\n    }\n    \n    const loadActions=(ticketid, url,token)=>{\n        const xhr=new XMLHttpRequest();\n        \n        xhr.open('POST',url,true);\n     \n        const formData= new FormData();\n        formData.append('wstoken',token);\n        formData.append('wsfunction','local_ticketmanagement_load_actions');\n        formData.append('moodlewsrestformat','json');\n        formData.append('params[0][ticketid]',ticketid);\n           \n        \n        setTimeout(()=>{\n            xhr.send(formData);\n        },100);\n        \n        xhr.onload=(event)=>{\n            onLoadFunction(xhr);\n        }\n    \n        xhr.onloadstart=(event)=>{\n            //showLoader(event);\n        }\n    \n        xhr.onprogress = (event)=>{\n            //onProgressFunction(event);\n        } \n        xhr.onloadend=(event)=>{\n            //hideLoader(event);\n        }\n        xhr.onerror = function() {\n            window.console.log(\"Solicitud fallida\");\n        };\n        const showLoader=(event)=>{\n            const loader=document.querySelector('.loader');\n            const table=document.querySelector('.generaltable');\n            loader.classList.remove('hide');\n            loader.classList.add('show');\n            table.classList.add('hide');\n          \n          }\n          \n          const hideLoader=(event)=>{\n            const loader=document.querySelector('.loader');\n            const table=document.querySelector('.generaltable');\n            loader.classList.remove('show');\n            loader.classList.add('hide');\n            table.classList.remove('hide');\n          }\n    \n    }\n    \n    const onLoadFunction=(myXhr)=>{\n        /*const loader=document.querySelector('.loader');\n        loader.classList.add('.hide');\n        loader.classList.remove('.show');\n    */\n        if (myXhr.readyState===4 && myXhr.status===200){\n            const res=JSON.parse(myXhr.response);\n            \n            createExcelFromJSON(res.result,'logsReport');\n            \n            \n        }\n    }\n    \n    const createExcelFromJSON = (res, op) => {\n        let listado = [];\n        \n        // Generar títulos basados en las claves del primer objeto\n        const titles = Object.keys(res[0]);\n        listado.push(titles);\n    \n        // Convertir cada objeto a un array de valores y añadirlo al listado\n        const actionArray = res.map(action => [\n            action.id,\n            action.action,\n            action.hiddenmessage,\n            parseDate(action.dateaction),\n            action.user,\n            action.ticketid,\n        ]);\n        listado = listado.concat(actionArray);\n    \n        // Crear un nuevo libro de Excel\n        const wb = XLSX.utils.book_new();\n        const dr = new Date();\n        const dateFile = dr.getDate();\n        const month = dr.getMonth() + 1;\n        const year = dr.getFullYear();\n        const min = dr.getMinutes();\n        const hour = dr.getHours();\n    \n        // Configuración de propiedades del archivo\n        wb.Props = {\n            Title: \"List of actions\",\n            Subject: \"Training program report\",\n            Author: \"Alberto Marín\",\n            CreateDate: new Date(year, month - 1, dateFile) // Ajuste del mes a base 0\n        };\n    \n        // Añadir una hoja de Excel con el nombre \"TicketsReport\"\n        wb.SheetNames.push(\"LogsReport\");\n        const ws = XLSX.utils.aoa_to_sheet(listado);\n        wb.Sheets[\"LogsReport\"] = ws;\n    \n        // Generar y descargar el archivo\n        const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\n        const nameFile = `LogsReport-${listado[1][5]}.xlsx`;\n        saveAs(new Blob([s2ab(wbout)], { type: \"application/octet-stream\" }), nameFile);\n    };\n    \n    // Función auxiliar para convertir la cadena de datos binarios a ArrayBuffer\n    const s2ab = (s) => {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n        return buf;\n    };\n    \n    const parseDate = (str) => {\n        const partesFecha = str.split(\" \"); // Separamos la fecha y la hora\n        const partesFechaHora = partesFecha[0].split(\"-\"); // Separamos el día, mes y año\n        const partesHora = partesFecha[1].split(\":\"); // Separamos la hora y los minutos\n    \n        const fecha = new Date(\n            partesFechaHora[2], // Año\n            partesFechaHora[1] - 1, // Mes (0-based)\n            partesFechaHora[0], // Día\n            partesHora[0], // Hora\n            partesHora[1] // Minutos\n        );\n        return fecha;\n    };\n\n    return {\n        init:init\n    }\n})\n\n\n\n\n  "],"names":["define","ModalForm","funcionesComunes","addToast","url","M","cfg","wwwroot","token","document","querySelector","value","showTicketActions","e","stopPropagation","ticketId","target","dataset","ticketid","modalForm","formClass","args","num_ticket","modalConfig","title","returnFocus","show","addEventListener","events","FORM_SUBMITTED","add","detail","hiddenticketid","LOADED","formElement","areElementsLoaded","then","elements","state","disabled","textContent","trim","loadActions","catch","error","window","console","xhr","XMLHttpRequest","open","formData","FormData","append","setTimeout","send","onload","event","onLoadFunction","onloadstart","onprogress","onloadend","onerror","log","myXhr","readyState","status","res","JSON","parse","response","createExcelFromJSON","result","op","listado","titles","Object","keys","push","actionArray","map","action","id","hiddenmessage","parseDate","dateaction","user","concat","wb","XLSX","utils","book_new","dr","Date","dateFile","getDate","month","getMonth","year","getFullYear","getMinutes","getHours","Props","Title","Subject","Author","CreateDate","SheetNames","ws","aoa_to_sheet","Sheets","wbout","write","bookType","type","nameFile","saveAs","Blob","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","str","partesFecha","split","partesFechaHora","partesHora","init","querySelectorAll","forEach","node"],"mappings":"AAAAA,0CAAO,CACH,sBACA,2CACA,eACD,SAASC,UAAWC,iBAAkBC,gBAC/BC,IAAIC,EAAEC,IAAIC,QAAQ,8BAClBC,MAAMC,SAASC,cAAc,uBAAuBC,MAYpDC,kBAAmBC,IACrBA,EAAEC,wBACIC,SAASF,EAAEG,OAAOC,QAAQC,SAC1BC,UAAU,IAAIlB,UAAU,CAC1BmB,UAAW,mDACXC,KAAM,CAACC,WAAYP,UACnBQ,YAAa,CAACC,iCAA2BT,WACzCU,YAAYZ,EAAEG,SAGlBG,UAAUO,OAEVP,UAAUQ,iBAAiBR,UAAUS,OAAOC,gBAAiBhB,IAEzDV,SAAS2B,sBAAejB,EAAEkB,OAAOC,yCAIrCb,UAAUQ,iBAAiBR,UAAUS,OAAOK,QAASpB,UAG3CqB,YAAYrB,EAAEG,OAEpBd,iBAAiBiC,kBAAkB,uEAAwED,aAAaE,MAAMC,iBACpHC,MAAMJ,YAAYxB,cAAc,uBAAuBC,SAEjD,cAAR2B,OAA+B,WAARA,MAAiB,CACpBJ,YAAYxB,cAAc,6BAChC6B,UAAS,EACVL,YAAYxB,cAAc,8BAChC6B,UAAS,EAGLL,YAAYxB,cAAc,0BAChCiB,iBAAiB,SAASd,UAEzBK,SADUgB,YAAYxB,cAAc,6BACjB8B,YAAYC,OACrCC,YAAYxB,SAASd,IAAII,aAE9BmC,OAAOC,QACNC,OAAOC,QAAQF,MAAM,wCAAyCA,cAKpEF,YAAY,CAACxB,SAAUd,IAAII,eACvBuC,IAAI,IAAIC,eAEdD,IAAIE,KAAK,OAAO7C,KAAI,SAEd8C,SAAU,IAAIC,SACpBD,SAASE,OAAO,UAAU5C,OAC1B0C,SAASE,OAAO,aAAa,uCAC7BF,SAASE,OAAO,qBAAqB,QACrCF,SAASE,OAAO,sBAAsBlC,UAGtCmC,YAAW,KACPN,IAAIO,KAAKJ,YACX,KAEFH,IAAIQ,OAAQC,QACRC,eAAeV,MAGnBA,IAAIW,YAAaF,UAIjBT,IAAIY,WAAcH,UAGlBT,IAAIa,UAAWJ,UAGfT,IAAIc,QAAU,WACVhB,OAAOC,QAAQgB,IAAI,uBAqBrBL,eAAgBM,WAKK,IAAnBA,MAAMC,YAAiC,MAAfD,MAAME,OAAa,OACrCC,IAAIC,KAAKC,MAAML,MAAMM,UAE3BC,oBAAoBJ,IAAIK,OAAO,gBAMjCD,oBAAsB,CAACJ,IAAKM,UAC1BC,QAAU,SAGRC,OAASC,OAAOC,KAAKV,IAAI,IAC/BO,QAAQI,KAAKH,cAGPI,YAAcZ,IAAIa,KAAIC,QAAU,CAClCA,OAAOC,GACPD,OAAOA,OACPA,OAAOE,cACPC,UAAUH,OAAOI,YACjBJ,OAAOK,KACPL,OAAO9D,YAEXuD,QAAUA,QAAQa,OAAOR,mBAGnBS,GAAKC,KAAKC,MAAMC,WAChBC,GAAK,IAAIC,KACTC,SAAWF,GAAGG,UACdC,MAAQJ,GAAGK,WAAa,EACxBC,KAAON,GAAGO,cACJP,GAAGQ,aACFR,GAAGS,WAGhBb,GAAGc,MAAQ,CACPC,MAAO,kBACPC,QAAS,0BACTC,OAAQ,gBACRC,WAAY,IAAIb,KAAKK,KAAMF,MAAQ,EAAGF,WAI1CN,GAAGmB,WAAW7B,KAAK,oBACb8B,GAAKnB,KAAKC,MAAMmB,aAAanC,SACnCc,GAAGsB,OAAH,WAA0BF,SAGpBG,MAAQtB,KAAKuB,MAAMxB,GAAI,CAAEyB,SAAU,OAAQC,KAAM,WACjDC,8BAAyBzC,QAAQ,GAAG,YAC1C0C,OAAO,IAAIC,KAAK,CAACC,KAAKP,QAAS,CAAEG,KAAM,6BAA+BC,WAIpEG,KAAQC,UACJC,IAAM,IAAIC,YAAYF,EAAEG,QACxBC,KAAO,IAAIC,WAAWJ,SACvB,IAAIK,EAAI,EAAGA,GAAKN,EAAEG,SAAUG,EAAGF,KAAKE,GAAuB,IAAlBN,EAAEO,WAAWD,UACpDL,KAGLpC,UAAa2C,YACTC,YAAcD,IAAIE,MAAM,KACxBC,gBAAkBF,YAAY,GAAGC,MAAM,KACvCE,WAAaH,YAAY,GAAGC,MAAM,YAE1B,IAAIpC,KACdqC,gBAAgB,GAChBA,gBAAgB,GAAK,EACrBA,gBAAgB,GAChBC,WAAW,GACXA,WAAW,WAKZ,CACHC,KAhMQ,KAEG1H,SAAS2H,iBAAiB,SAEhCC,SAASC,OACVA,KAAK3G,iBAAiB,SAASd,IAC3BD,kBAAkBC"}