{"version":3,"file":"exportExcel.min.js","sources":["../src/exportExcel.js"],"sourcesContent":["\nexport const init=(XLSX, filesaver,blobutil)=>{\n    //definicion de url\n    const url=M.cfg.wwwroot+'/webservice/rest/server.php';\n    const token=document.querySelector('input[name=\"token\"]').value;\n    const boexport=document.querySelector('#id_exportExcel');\n    const boexportActions=document.querySelector('#id_exportExcelActions');\n    boexport.addEventListener('click',(e)=>{\n        exportToExcel(e,XLSX,filesaver,blobutil, url);\n        \n    });\n    boexportActions.addEventListener('click',(e)=>{\n        const startdate=document.querySelector('#startdate').value;\n        const startdateValue = new Date(startdate);\n\n        // Obtén el valor en formato Unix (milisegundos desde 1970) y conviértelo a segundos\n        const startdate_unixTimestamp = Math.floor(startdateValue.getTime() / 1000);\n\n        const enddate=document.querySelector('#enddate').value;\n\n        // Convierte el valor de la fecha a un objeto Date\n        const enddateValue = new Date(enddate);\n\n        // Obtén el valor en formato Unix (milisegundos desde 1970) y conviértelo a segundos\n        const enddate_unixTimestamp = Math.floor(enddateValue.getTime() / 1000);\n\n        const selstate=document.querySelector('#id_state').value;\n        const gestorvalue=document.querySelector('#id_logistic').value;\n\n        exportToExcelActions(startdate_unixTimestamp,enddate_unixTimestamp,selstate,gestorvalue,token,url);\n    });\n}\n\nconst exportToExcelActions=(startdate,enddate,state,gestor,token,url)=>{\n    const xhr=new XMLHttpRequest();\n    \n    xhr.open('POST',url,true);\n \n    const formData= new FormData();\n    formData.append('wstoken',token);\n    formData.append('wsfunction','local_ticketmanagement_get_ticket_actions_excel');\n    formData.append('moodlewsrestformat','json');\n    formData.append('params[0][startdate]',startdate);\n    formData.append('params[0][enddate]',enddate);\n    formData.append('params[0][state]',state);\n    formData.append('params[0][gestor]',gestor);\n    \n    \n    setTimeout(()=>{\n        xhr.send(formData);\n    },100);\n    \n    xhr.onload=(event)=>{\n        onLoadFunctionActions(xhr);\n    }\n\n    xhr.onloadstart=(event)=>{\n        showLoader(event);\n    }\n\n    xhr.onprogress = (event)=>{\n        onProgressFunction(event);\n    } \n    xhr.onloadend=(event)=>{\n        hideLoader(event);\n    }\n    xhr.onerror = function() {\n        window.console.log(\"Solicitud fallida\");\n    };\n    const showLoader=(event)=>{\n        const loader=document.querySelector('.excel_loader');\n        loader.classList.remove('hide');\n        loader.classList.add('show');\n        const boExcel=document.querySelector('#id_exportExcel').disabled=true;\n      }\n      \n      const hideLoader=(event)=>{\n        const loader=document.querySelector('.excel_loader');\n        loader.classList.remove('show');\n        loader.classList.add('hide');\n        const boExcel=document.querySelector('#id_exportExcel').disabled=false;\n        \n      }\n\n}\n\nconst onLoadFunctionActions=(myXhr)=>{\n    if (myXhr.readyState===4 && myXhr.status===200){\n        const res=JSON.parse(myXhr.response);\n        \n        createExcelFromJSON(res.listofactions,'actionReport');\n        \n        \n    }\n}\n\n\nconst exportToExcel=(e,XLSX,filesaver,blobutil, url)=>{\n    \n    const startdatetxt=document.querySelector('#startdate');\n    // Convierte el valor de la fecha a un objeto Date\n    const startdateValue = new Date(startdatetxt.value);\n\n    // Obtén el valor en formato Unix (milisegundos desde 1970) y conviértelo a segundos\n    const startdate_unixTimestamp = Math.floor(startdateValue.getTime() / 1000);\n\n    const enddatetxt=document.querySelector('#enddate');\n    // Convierte el valor de la fecha a un objeto Date\n    const enddateValue = new Date(enddatetxt.value);\n\n    // Obtén el valor en formato Unix (milisegundos desde 1970) y conviértelo a segundos\n    const enddate_unixTimestamp = Math.floor(enddateValue.getTime() / 1000);\n\n    const selstate=document.querySelector('#id_state').value;\n    const gestorvalue=document.querySelector('#id_logistic').value;\n    \n    const data={\n        startdate:startdate_unixTimestamp,\n        enddate:enddate_unixTimestamp,\n        state:selstate,\n        gestor:gestorvalue\n    }\n    prepareDataToSend(data, url,token);\n}\n\nconst prepareDataToSend=(data, url,token)=>{\n    const xhr=new XMLHttpRequest();\n    \n    xhr.open('POST',url,true);\n \n    const formData= new FormData();\n    formData.append('wstoken',token);\n    formData.append('wsfunction','local_ticketmanagement_get_tickets_excel');\n    formData.append('moodlewsrestformat','json');\n    formData.append('params[0][startdate]',data.startdate);\n    formData.append('params[0][enddate]',data.enddate);\n    formData.append('params[0][state]',data.state);\n    formData.append('params[0][gestor]',data.gestor);\n    \n    \n    setTimeout(()=>{\n        xhr.send(formData);\n    },100);\n    \n    xhr.onload=(event)=>{\n        onLoadFunction(xhr);\n    }\n\n    xhr.onloadstart=(event)=>{\n        showLoader(event);\n    }\n\n    xhr.onprogress = (event)=>{\n        onProgressFunction(event);\n    } \n    xhr.onloadend=(event)=>{\n        hideLoader(event);\n    }\n    xhr.onerror = function() {\n        window.console.log(\"Solicitud fallida\");\n    };\n    const showLoader=(event)=>{\n        const loader=document.querySelector('.excel_loader');\n        loader.classList.remove('hide');\n        loader.classList.add('show');\n        const boExcel=document.querySelector('#id_exportExcel').disabled=true;\n      }\n      \n      const hideLoader=(event)=>{\n        const loader=document.querySelector('.excel_loader');\n        loader.classList.remove('show');\n        loader.classList.add('hide');\n        const boExcel=document.querySelector('#id_exportExcel').disabled=false;\n        \n      }\n\n}\n\nconst onLoadFunction=(myXhr)=>{\n    /*const loader=document.querySelector('.loader');\n    loader.classList.add('.hide');\n    loader.classList.remove('.show');\n*/\n    if (myXhr.readyState===4 && myXhr.status===200){\n        const res=JSON.parse(myXhr.response);\n        createExcelFromJSON(res,'ticketReport');\n        \n    }\n}\n\nconst onProgressFunction=(event) =>{\n    console.log(`Uploaded ${event.loaded} of ${event.total}`);\n    const loader=document.querySelector('.loader');\n    loader.classList.remove('.hide');\n    loader.classList.add('.show');\n}\n\nconst createExcelFromJSON = (res, op) => {\n    let listado = [];\n    \n    if (op==='ticketReport'){\n        // Generar títulos basados en las claves del primer objeto\n        const titles = Object.keys(res.listadoTickets[0]);\n        listado.push(titles);\n\n        // Convertir cada objeto a un array de valores y añadirlo al listado\n        const ticketsArray = res.listadoTickets.map(ticket => [\n            ticket.ticketnumber,\n            ticket.category,\n            ticket.subcategory,\n            ticket.customer,\n            ticket.vessel,\n            ticket.billid,\n            ((/webservice/i).test(ticket.username))?'no user':ticket.username,\n            ticket.familyissue,\n            ticket.familiarname,\n            ticket.familiar_role,\n            formatUnixToDateTime(ticket.date),\n            formatUnixToDateTime(ticket.lastdate),\n            ticket.state,\n            ticket.description,\n            ticket.priority,\n            ticket.label,\n            ticket.assigned\n        ]);\n        listado = listado.concat(ticketsArray);\n    } else if (op==='actionReport') {\n        window.console.log(\"hola\");\n        // Generar títulos basados en las claves del primer objeto\n        const titles = Object.keys(res[0]);\n        listado.push(titles);\n\n        // Convertir cada objeto a un array de valores y añadirlo al listado\n        const actionArray = res.map(action => [\n            action.action,\n            action.internal,\n            formatUnixToDateTime(action.dateaction),\n            action.user,\n            action.ticketid,\n        ]);\n        listado = listado.concat(actionArray);\n    }\n    \n\n    // Crear un nuevo libro de Excel\n    const wb = XLSX.utils.book_new();\n    const dr = new Date();\n    const dateFile = dr.getDate();\n    const month = dr.getMonth() + 1;\n    const year = dr.getFullYear();\n    const min = dr.getMinutes();\n    const hour = dr.getHours();\n\n    // Configuración de propiedades del archivo\n    wb.Props = {\n        Title: (op==='ticketReport')?\"List of tickets\":'actionReport',\n        Subject: \"Training program report\",\n        Author: \"Alberto Marín\",\n        CreateDate: new Date(year, month - 1, dateFile) // Ajuste del mes a base 0\n    };\n\n    // Añadir una hoja de Excel con el nombre \"TicketsReport\"\n    const pageTitle=(op==='ticketReport')?'TicketsReport':'ActionsReport';\n    wb.SheetNames.push(pageTitle);\n    const ws = XLSX.utils.aoa_to_sheet(listado);\n    wb.Sheets[pageTitle] = ws;\n\n    // Generar y descargar el archivo\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\n    const nameFile = `${pageTitle}-${dateFile}.${month}.${year}-${hour}.${min}.xlsx`;\n    saveAs(new Blob([s2ab(wbout)], { type: \"application/octet-stream\" }), nameFile);\n};\n\n// Función auxiliar para convertir la cadena de datos binarios a ArrayBuffer\nconst s2ab = (s) => {\n    const buf = new ArrayBuffer(s.length);\n    const view = new Uint8Array(buf);\n    for (let i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n    return buf;\n};\n\nconst formatUnixToDateTime = (unixTimestamp) => {\n    const date = new Date(unixTimestamp * 1000); // Convertir de segundos a milisegundos\n    \n\n    return date;\n};\n\n\n"],"names":["XLSX","filesaver","blobutil","url","M","cfg","wwwroot","token","document","querySelector","value","boexport","boexportActions","addEventListener","e","exportToExcel","startdate","startdateValue","Date","startdate_unixTimestamp","Math","floor","getTime","enddate","enddateValue","enddate_unixTimestamp","selstate","gestorvalue","exportToExcelActions","state","gestor","xhr","XMLHttpRequest","open","formData","FormData","append","setTimeout","send","onload","event","onLoadFunctionActions","onloadstart","showLoader","onprogress","onProgressFunction","onloadend","hideLoader","onerror","window","console","log","loader","classList","remove","add","disabled","myXhr","readyState","status","res","JSON","parse","response","createExcelFromJSON","listofactions","startdatetxt","enddatetxt","prepareDataToSend","data","onLoadFunction","loaded","total","op","listado","titles","Object","keys","listadoTickets","push","ticketsArray","map","ticket","ticketnumber","category","subcategory","customer","vessel","billid","test","username","familyissue","familiarname","familiar_role","formatUnixToDateTime","date","lastdate","description","priority","label","assigned","concat","actionArray","action","internal","dateaction","user","ticketid","wb","utils","book_new","dr","dateFile","getDate","month","getMonth","year","getFullYear","min","getMinutes","hour","getHours","Props","Title","Subject","Author","CreateDate","pageTitle","SheetNames","ws","aoa_to_sheet","Sheets","wbout","write","bookType","type","nameFile","saveAs","Blob","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","unixTimestamp"],"mappings":"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"}