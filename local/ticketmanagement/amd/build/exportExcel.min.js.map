{"version":3,"file":"exportExcel.min.js","sources":["../src/exportExcel.js"],"sourcesContent":["\nexport const init=(XLSX, filesaver,blobutil)=>{\n    //definicion de url\n    const url=M.cfg.wwwroot+'/webservice/rest/server.php';\n    const token=document.querySelector('input[name=\"token\"]').value;\n    const boexport=document.querySelector('#id_exportExcel');\n    boexport.addEventListener('click',(e)=>{\n        exportToExcel(e,XLSX,filesaver,blobutil, url);\n    });\n}\n\nconst exportToExcel=(e,XLSX,filesaver,blobutil, url)=>{\n    \n    const startdatetxt=document.querySelector('#startdate');\n    // Convierte el valor de la fecha a un objeto Date\n    const startdateValue = new Date(startdatetxt.value);\n\n    // Obtén el valor en formato Unix (milisegundos desde 1970) y conviértelo a segundos\n    const startdate_unixTimestamp = Math.floor(startdateValue.getTime() / 1000);\n\n    const enddatetxt=document.querySelector('#enddate');\n    // Convierte el valor de la fecha a un objeto Date\n    const enddateValue = new Date(enddatetxt.value);\n\n    // Obtén el valor en formato Unix (milisegundos desde 1970) y conviértelo a segundos\n    const enddate_unixTimestamp = Math.floor(enddateValue.getTime() / 1000);\n    \n    const data={\n        startdate:startdate_unixTimestamp,\n        enddate:enddate_unixTimestamp,\n    }\n    prepareDataToSend(data, url,token);\n}\n\nconst prepareDataToSend=(data, url,token)=>{\n    const xhr=new XMLHttpRequest();\n    \n    xhr.open('POST',url,true);\n \n    const formData= new FormData();\n    formData.append('wstoken',token);\n    formData.append('wsfunction','local_ticketmanagement_get_tickets_excel');\n    formData.append('moodlewsrestformat','json');\n    formData.append('params[0][startdate]',data.startdate);\n    formData.append('params[0][enddate]',data.enddate);\n    \n    \n    setTimeout(()=>{\n        xhr.send(formData);\n    },100);\n    \n    xhr.onload=(event)=>{\n        onLoadFunction(xhr);\n    }\n\n    xhr.onloadstart=(event)=>{\n        //showLoader(event);\n    }\n\n    xhr.onprogress = (event)=>{\n        //onProgressFunction(event);\n    } \n    xhr.onloadend=(event)=>{\n        //hideLoader(event);\n    }\n    xhr.onerror = function() {\n        window.console.log(\"Solicitud fallida\");\n    };\n    const showLoader=(event)=>{\n        const loader=document.querySelector('.loader');\n        const table=document.querySelector('.generaltable');\n        loader.classList.remove('hide');\n        loader.classList.add('show');\n        table.classList.add('hide');\n      \n      }\n      \n      const hideLoader=(event)=>{\n        const loader=document.querySelector('.loader');\n        const table=document.querySelector('.generaltable');\n        loader.classList.remove('show');\n        loader.classList.add('hide');\n        table.classList.remove('hide');\n      }\n\n}\n\nconst onLoadFunction=(myXhr)=>{\n    /*const loader=document.querySelector('.loader');\n    loader.classList.add('.hide');\n    loader.classList.remove('.show');\n*/\n    if (myXhr.readyState===4 && myXhr.status===200){\n        const res=JSON.parse(myXhr.response);\n        createExcelFromJSON(res,'ticketReport');\n        \n    }\n}\n\nconst onProgressFunction=(event) =>{\n    console.log(`Uploaded ${event.loaded} of ${event.total}`);\n    const loader=document.querySelector('.loader');\n    loader.classList.remove('.hide');\n    loader.classList.add('.show');\n}\n\nconst createExcelFromJSON = (res, op) => {\n    let listado = [];\n    \n    // Generar títulos basados en las claves del primer objeto\n    const titles = Object.keys(res.listadoTickets[0]);\n    listado.push(titles);\n\n    // Convertir cada objeto a un array de valores y añadirlo al listado\n    const ticketsArray = res.listadoTickets.map(ticket => [\n        ticket.ticketnumber,\n        ticket.username,\n        ticket.familyissue,\n        formatUnixToDateTime(ticket.date),\n        ticket.state,\n        ticket.description,\n        ticket.priority,\n        ticket.assigned\n    ]);\n    listado = listado.concat(ticketsArray);\n\n    // Crear un nuevo libro de Excel\n    const wb = XLSX.utils.book_new();\n    const dr = new Date();\n    const dateFile = dr.getDate();\n    const month = dr.getMonth() + 1;\n    const year = dr.getFullYear();\n    const min = dr.getMinutes();\n    const hour = dr.getHours();\n\n    // Configuración de propiedades del archivo\n    wb.Props = {\n        Title: \"List of tickets\",\n        Subject: \"Training program report\",\n        Author: \"Alberto Marín\",\n        CreateDate: new Date(year, month - 1, dateFile) // Ajuste del mes a base 0\n    };\n\n    // Añadir una hoja de Excel con el nombre \"TicketsReport\"\n    wb.SheetNames.push(\"TicketsReport\");\n    const ws = XLSX.utils.aoa_to_sheet(listado);\n    wb.Sheets[\"TicketsReport\"] = ws;\n\n    // Generar y descargar el archivo\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\n    const nameFile = `TicketsReport-${dateFile}.${month}.${year}-${hour}.${min}.xlsx`;\n    saveAs(new Blob([s2ab(wbout)], { type: \"application/octet-stream\" }), nameFile);\n};\n\n// Función auxiliar para convertir la cadena de datos binarios a ArrayBuffer\nconst s2ab = (s) => {\n    const buf = new ArrayBuffer(s.length);\n    const view = new Uint8Array(buf);\n    for (let i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n    return buf;\n};\n\nconst formatUnixToDateTime = (unixTimestamp) => {\n    const date = new Date(unixTimestamp * 1000); // Convertir de segundos a milisegundos\n    \n\n    return date;\n};\n"],"names":["XLSX","filesaver","blobutil","url","M","cfg","wwwroot","document","querySelector","value","addEventListener","e","exportToExcel","startdatetxt","startdateValue","Date","startdate_unixTimestamp","Math","floor","getTime","enddatetxt","enddateValue","enddate_unixTimestamp","prepareDataToSend","startdate","enddate","token","data","xhr","XMLHttpRequest","open","formData","FormData","append","setTimeout","send","onload","event","onLoadFunction","onloadstart","onprogress","onloadend","onerror","window","console","log","myXhr","readyState","status","res","JSON","parse","response","createExcelFromJSON","op","listado","titles","Object","keys","listadoTickets","push","ticketsArray","map","ticket","ticketnumber","username","familyissue","formatUnixToDateTime","date","state","description","priority","assigned","concat","wb","utils","book_new","dr","dateFile","getDate","month","getMonth","year","getFullYear","min","getMinutes","hour","getHours","Props","Title","Subject","Author","CreateDate","SheetNames","ws","aoa_to_sheet","Sheets","wbout","write","bookType","type","nameFile","saveAs","Blob","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","unixTimestamp"],"mappings":"uKACkB,CAACA,KAAMC,UAAUC,kBAEzBC,IAAIC,EAAEC,IAAIC,QAAQ,8BACZC,SAASC,cAAc,uBAAuBC,MAC3CF,SAASC,cAAc,mBAC7BE,iBAAiB,SAASC,IAC/BC,cAAcD,EAAEX,KAAKC,UAAUC,SAAUC,eAI3CS,cAAc,CAACD,EAAEX,KAAKC,UAAUC,SAAUC,aAEtCU,aAAaN,SAASC,cAAc,cAEpCM,eAAiB,IAAIC,KAAKF,aAAaJ,OAGvCO,wBAA0BC,KAAKC,MAAMJ,eAAeK,UAAY,KAEhEC,WAAWb,SAASC,cAAc,YAElCa,aAAe,IAAIN,KAAKK,WAAWX,OAGnCa,sBAAwBL,KAAKC,MAAMG,aAAaF,UAAY,KAMlEI,kBAJW,CACPC,UAAUR,wBACVS,QAAQH,uBAEYnB,IAAIuB,QAG1BH,kBAAkB,CAACI,KAAMxB,IAAIuB,eACzBE,IAAI,IAAIC,eAEdD,IAAIE,KAAK,OAAO3B,KAAI,SAEd4B,SAAU,IAAIC,SACpBD,SAASE,OAAO,UAAUP,OAC1BK,SAASE,OAAO,aAAa,4CAC7BF,SAASE,OAAO,qBAAqB,QACrCF,SAASE,OAAO,uBAAuBN,KAAKH,WAC5CO,SAASE,OAAO,qBAAqBN,KAAKF,SAG1CS,YAAW,KACPN,IAAIO,KAAKJ,YACX,KAEFH,IAAIQ,OAAQC,QACRC,eAAeV,MAGnBA,IAAIW,YAAaF,UAIjBT,IAAIY,WAAcH,UAGlBT,IAAIa,UAAWJ,UAGfT,IAAIc,QAAU,WACVC,OAAOC,QAAQC,IAAI,uBAqBrBP,eAAgBQ,WAKK,IAAnBA,MAAMC,YAAiC,MAAfD,MAAME,OAAa,OACrCC,IAAIC,KAAKC,MAAML,MAAMM,UAC3BC,oBAAoBJ,IAAI,kBAY1BI,oBAAsB,CAACJ,IAAKK,UAC1BC,QAAU,SAGRC,OAASC,OAAOC,KAAKT,IAAIU,eAAe,IAC9CJ,QAAQK,KAAKJ,cAGPK,aAAeZ,IAAIU,eAAeG,KAAIC,QAAU,CAClDA,OAAOC,aACPD,OAAOE,SACPF,OAAOG,YACPC,qBAAqBJ,OAAOK,MAC5BL,OAAOM,MACPN,OAAOO,YACPP,OAAOQ,SACPR,OAAOS,YAEXjB,QAAUA,QAAQkB,OAAOZ,oBAGnBa,GAAK1E,KAAK2E,MAAMC,WAChBC,GAAK,IAAI9D,KACT+D,SAAWD,GAAGE,UACdC,MAAQH,GAAGI,WAAa,EACxBC,KAAOL,GAAGM,cACVC,IAAMP,GAAGQ,aACTC,KAAOT,GAAGU,WAGhBb,GAAGc,MAAQ,CACPC,MAAO,kBACPC,QAAS,0BACTC,OAAQ,gBACRC,WAAY,IAAI7E,KAAKmE,KAAMF,MAAQ,EAAGF,WAI1CJ,GAAGmB,WAAWjC,KAAK,uBACbkC,GAAK9F,KAAK2E,MAAMoB,aAAaxC,SACnCmB,GAAGsB,OAAH,cAA6BF,SAGvBG,MAAQjG,KAAKkG,MAAMxB,GAAI,CAAEyB,SAAU,OAAQC,KAAM,WACjDC,iCAA4BvB,qBAAYE,kBAASE,iBAAQI,iBAAQF,aACvEkB,OAAO,IAAIC,KAAK,CAACC,KAAKP,QAAS,CAAEG,KAAM,6BAA+BC,WAIpEG,KAAQC,UACJC,IAAM,IAAIC,YAAYF,EAAEG,QACxBC,KAAO,IAAIC,WAAWJ,SACvB,IAAIK,EAAI,EAAGA,GAAKN,EAAEG,SAAUG,EAAGF,KAAKE,GAAuB,IAAlBN,EAAEO,WAAWD,UACpDL,KAGLvC,qBAAwB8C,eACb,IAAIlG,KAAqB,IAAhBkG"}