define("local_ticketmanagement/checklogs",["core_form/modalform","local_ticketmanagement/funciones_comunes"],(function(ModalForm,funcionesComunes){const url=M.cfg.wwwroot+"/webservice/rest/server.php",token=document.querySelector('input[name="token"]').value,showTicketActions=e=>{e.stopPropagation();const ticketId=e.target.dataset.ticketid,modalForm=new ModalForm({formClass:"\\local_ticketmanagement\\form\\ActionsFormPopup",args:{num_ticket:ticketId},modalConfig:{title:"Ticket details: #".concat(ticketId)},returnFocus:e.target});modalForm.show(),modalForm.addEventListener(modalForm.events.FORM_SUBMITTED,(e=>{})),modalForm.addEventListener(modalForm.events.LOADED,(e=>{const formElement=e.target;funcionesComunes.areElementsLoaded('button[name="boExcel"],input[name="description"],input[name="state"]',formElement).then((elements=>{const state=formElement.querySelector('input[name="state"]').value;if("Cancelled"===state||"Closed"===state){formElement.querySelector('input[name="description"]').disabled=!0;formElement.querySelector('button[data-action="save"]').disabled=!0}formElement.querySelector('button[name="boExcel"]').addEventListener("click",(e=>{const ticketid=formElement.querySelector('div[data-name="ticketid"]').textContent.trim();loadActions(ticketid,url,token)}))})).catch((error=>{window.console.error("Error al cargar los elementos select:",error)}))}))},loadActions=(ticketid,url,token)=>{const xhr=new XMLHttpRequest;xhr.open("POST",url,!0);const formData=new FormData;formData.append("wstoken",token),formData.append("wsfunction","local_ticketmanagement_load_actions"),formData.append("moodlewsrestformat","json"),formData.append("params[0][ticketid]",ticketid),setTimeout((()=>{xhr.send(formData)}),100),xhr.onload=event=>{onLoadFunction(xhr)},xhr.onloadstart=event=>{},xhr.onprogress=event=>{},xhr.onloadend=event=>{},xhr.onerror=function(){window.console.log("Solicitud fallida")}},onLoadFunction=myXhr=>{if(4===myXhr.readyState&&200===myXhr.status){const res=JSON.parse(myXhr.response);createExcelFromJSON(res,"logsReport"),window.console.log(res)}},createExcelFromJSON=(res,op)=>{let listado=[];const titles=Object.keys(res[0]);listado.push(titles);const actionArray=res.map((action=>[action.id,action.action,parseDate(action.dateaction),action.user,action.ticketid]));listado=listado.concat(actionArray);const wb=XLSX.utils.book_new(),dr=new Date,dateFile=dr.getDate(),month=dr.getMonth()+1,year=dr.getFullYear();dr.getMinutes(),dr.getHours();wb.Props={Title:"List of actions",Subject:"Training program report",Author:"Alberto MarÃ­n",CreateDate:new Date(year,month-1,dateFile)},wb.SheetNames.push("LogsReport");const ws=XLSX.utils.aoa_to_sheet(listado);wb.Sheets.LogsReport=ws;const wbout=XLSX.write(wb,{bookType:"xlsx",type:"binary"}),nameFile="LogsReport-".concat(listado[1].ticketid,".xlsx");saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}),nameFile)},s2ab=s=>{const buf=new ArrayBuffer(s.length),view=new Uint8Array(buf);for(let i=0;i!=s.length;++i)view[i]=255&s.charCodeAt(i);return buf},parseDate=str=>{const partesFecha=str.split(" "),partesFechaHora=partesFecha[0].split("-"),partesHora=partesFecha[1].split(":");return new Date(partesFechaHora[2],partesFechaHora[1]-1,partesFechaHora[0],partesHora[0],partesHora[1])};return{init:()=>{document.querySelectorAll(".logs").forEach((node=>{node.addEventListener("click",(e=>{showTicketActions(e)}))}))}}}));

//# sourceMappingURL=checklogs.min.js.map