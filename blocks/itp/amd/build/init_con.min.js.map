{"version":3,"file":"init_con.min.js","sources":["../src/init_con.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nconst url=M.cfg.wwwroot+'/webservice/rest/server.php';\n\nexport const loadITP = () => {\n    //Aseguramos que el token esté cargado\n    areElementsLoaded('#filteritpform input, #filteritpform select, #id_list_trainees, #id_tegroup').then((elements) => {\n        //Se obtienen los valores de los campos necesarios\n        const token = document.querySelector('input[name=\"token\"]').value;\n        const compacted = document.querySelector('#id_compacted').value;\n        const orderby = document.querySelector('input[name=\"orderby\"]');\n        const order = document.querySelector('input[name=\"order\"]');\n        const list_trainees= document.querySelector('#id_list_trainees');\n        const email = document.querySelector('input[name=\"email\"]');\n        const group = document.querySelector('#id_tegroup');\n        if (list_trainees.selectedIndex!==-1){\n            email.value=list_trainees.options[list_trainees.selectedIndex].value;\n        } else {\n            email.value='';\n        }\n\n        // Continuar con la carga de datos\n        loadITPDataFromServer(token, email.value, orderby.value, order.value, compacted);\n\n        //Definir el evento del selector de compactación\n        document.querySelector('#id_compacted').addEventListener('change', (ev) => {\n            //Al cambiar el valor del selector, se vuelve a cargar la información\n            //y orderby se mantiene a startdate\n            orderby.value = 'startdate';\n            order.value=1;\n            if (email.value)\n                loadITPDataFromServer(token, email.value, orderby.value, order.value, ev.target.value);\n            \n        });\n\n        //Definir el comportamiento del botón buscar\n        document.querySelector('#id_boenviar').addEventListener('click', (ev) => {\n            //Al hacer clic en el botón buscar, se vuelve a cargar la información\n            //y orderby se mantiene a startdate\n            orderby.value = 'startdate';\n            order.value=1;\n            if (list_trainees.selectedIndex!==-1){\n                email.value=list_trainees.options[list_trainees.selectedIndex].value;\n            } else {\n                email.value='';\n            }\n            const compactedUpdated = document.querySelector('#id_compacted').value;\n            if (email.value)\n                loadITPDataFromServer(token, email.value, orderby.value, order.value, compactedUpdated);\n        });\n\n        //Defino el comportamiento del selector de grupo cuando cambie\n        group.addEventListener('change',(ev)=>{\n            const role='student';\n            const customer=document.querySelector('input[name=\"customer\"]').value;\n            const groupname = ev.target.options[ev.target.selectedIndex].text;\n            actualizarDesplegable(role,customer,groupname,url,token);\n        });\n\n        document.querySelector(\"#id_selCustomer\").addEventListener('change',(ev)=>{\n            \n            //Obtiene el valor del campo customer\n            const customer=ev.target.value;\n            \n            actualizarDesplegableGrupos(customer,url,token);\n        });\n\n    });\n}\n\nconst actualizarDesplegableGrupos=(customer,url,token)=>{\n    return new Promise((resolve, reject) => {\n        let xhr = new XMLHttpRequest();\n    \n        //Se prepara el objeto a enviar\n        const formData= new FormData();\n        formData.append('wstoken',token);\n        formData.append('wsfunction', 'block_itp_load_groups');\n        formData.append('moodlewsrestformat', 'json');\n        formData.append('params[0][customerid]',customer);\n        \n        xhr.open('POST',url,true);\n        xhr.send(formData);\n\n        xhr.onload = (ev)=> {\n            if (xhr.status === 200) {\n                reqHandlerCustomerChangeEvent(xhr);\n                resolve(); // Resuelve la promesa cuando la solicitud ha terminado correctamente\n            } else {\n                rejectAnswer(xhr);\n                reject('Error al cargar la información'); // Rechaza la promesa en caso de error\n            }\n        }\n\n        xhr.onerror = ()=> {\n            rejectAnswer(xhr);\n            reject('Error de red al cargar la información'); // Rechaza la promesa en caso de error de red\n        }\n    });\n}\n\nconst reqHandlerCustomerChangeEvent=(xhr)=>{\n    if(xhr.status == 200){\n        let response = JSON.parse(xhr.responseText);\n        /*\n        Retorna la lista de usuarios asociados al grupo.\n        Ejemplo de retorno:\n        response=[\n            {id: 1, name: 'C1'},\n            {id: 2, name: 'C2'}\n        ]\n        */\n        const selGroup=document.querySelector('#id_tegroup');\n        selGroup.innerHTML = '';\n        //Actualiza selGroup con los valores devueltos por response\n        response.forEach((group) => {\n            const option = document.createElement('option');\n            option.value = group.id;\n            option.textContent = group.name;\n            selGroup.appendChild(option);\n        });\n        const role='student';\n        const customer=document.querySelector('input[name=\"customer\"]');\n        //Actualizamos el campo oculto con el valor del texto del desplegable id_selCustomer seleccionado\n        customer.value=document.querySelector('#id_selCustomer').options[document.querySelector('#id_selCustomer').selectedIndex].text;\n        const groupname=selGroup.options[selGroup.selectedIndex].text;\n        const token = document.querySelector('input[name=\"token\"]').value;\n        actualizarDesplegable(role,customer.value,groupname,url,token)\n\n    }\n}\n\nconst actualizarDesplegable=(role,customer,group,url,token)=>{\n    return new Promise((resolve, reject) => {\n        let xhr = new XMLHttpRequest();\n    \n        //Se prepara el objeto a enviar\n        const formData= new FormData();\n        formData.append('wstoken',token);\n        formData.append('wsfunction', 'block_itp_get_list_trainees');\n        formData.append('moodlewsrestformat', 'json');\n        formData.append('params[0][groupname]',group);\n        formData.append('params[0][customername]',customer);\n        formData.append('params[0][role]',role);\n        \n        xhr.open('POST',url,true);\n        xhr.send(formData);\n\n        xhr.onload = (ev)=> {\n            if (xhr.status === 200) {\n                reqHandlerGroupChangeEvent(xhr);\n                resolve(); // Resuelve la promesa cuando la solicitud ha terminado correctamente\n            } else {\n                rejectAnswer(xhr);\n                reject('Error al cargar la información'); // Rechaza la promesa en caso de error\n            }\n        }\n\n        xhr.onerror = ()=> {\n            rejectAnswer(xhr);\n            reject('Error de red al cargar la información'); // Rechaza la promesa en caso de error de red\n        }\n    });\n}\n\nconst reqHandlerGroupChangeEvent=(xhr)=>{\n    if(xhr.status == 200){\n        let response = JSON.parse(xhr.responseText);\n        /*\n        Retorna la lista de usuarios asociados al grupo.\n        Ejemplo de retorno:\n        response=[\n            {id: 480, username: 'g2c001@altra.com', firstname: 'student11', lastname: 'altra G2', email: 'g2c001@altra.com', customer: 'ALTR', billid: 'EN-111', role_name: 'student',groupname: 'G2'},\n            {id: 481, username: 'g2c002@altra.com', firstname: 'student12', lastname: 'altra G2', email: 'g2c002@altra.com', customer: 'ALTR', billid: 'EN-111', role_name: 'student',groupname: 'G2'}\n        ]\n        */\n        const selTrainees=document.querySelector('#id_list_trainees');\n        selTrainees.innerHTML = '';\n\n        //Actualiza selTrainees con los valores devueltos por response\n        response.forEach((user) => {\n            const option = document.createElement('option');\n            option.value = user.email;\n            option.textContent = `${user.groupname}_${user.billid} ${user.firstname}, ${user.lastname}`;\n            selTrainees.appendChild(option);\n        });\n\n        let activeSpan = document.querySelector('#fitem_id_list_trainees>div>div>span[role=\"option\"]');\n        let selectedTrainee=response[0];\n        if (selectedTrainee!==undefined){\n            if (activeSpan!==null){\n                activeSpan.setAttribute('data-value',(response.length===0)?'':response[0].email);\n                const span=document.createElement('span');\n                span.setAttribute('aria-hidden',true);\n                span.textContent=\"× \"\n                activeSpan.innerHTML=\"\";\n                activeSpan.appendChild(span);\n                activeSpan.innerHTML+= selectedTrainee.groupname+\"_\"+selectedTrainee.billid+\" \"+selectedTrainee.firstname+\", \"+selectedTrainee.lastname;\n            } \n        } else {\n            if (activeSpan!==null){\n                activeSpan.setAttribute('data-value',(response.length===0)?'':response[0].email);\n                const span=document.createElement('span');\n                span.setAttribute('aria-hidden',true);\n                span.textContent=\"× \"\n                activeSpan.innerHTML=\"\";\n                activeSpan.appendChild(span);\n                activeSpan.innerHTML+= \"This is an empty group.\";\n            } \n        }\n    }\n}\n\nconst loadITPDataFromServer = (token, email, orderby, order, compacted) => {\n    return new Promise((resolve, reject) => {\n        let xhr = new XMLHttpRequest();\n    \n        //Se prepara el objeto a enviar\n        const formData= new FormData();\n        formData.append('wstoken',token);\n        formData.append('wsfunction', 'block_itp_load_itp');\n        formData.append('moodlewsrestformat', 'json');\n        formData.append('params[0][email]',email);\n        formData.append('params[0][orderby]',orderby);\n        formData.append('params[0][order]',order);\n        formData.append('params[0][compacted]',compacted);\n        \n        xhr.open('POST',url,true);\n        xhr.send(formData);\n\n        xhr.onload = (ev)=> {\n            if (xhr.status === 200) {\n                reqHandlerLoadITP(xhr);\n\n                \n\n                resolve(); // Resuelve la promesa cuando la solicitud ha terminado correctamente\n            } else {\n                rejectAnswer(xhr);\n                reject('Error al cargar la información'); // Rechaza la promesa en caso de error\n            }\n        }\n\n        xhr.onerror = ()=> {\n            rejectAnswer(xhr);\n            reject('Error de red al cargar la información'); // Rechaza la promesa en caso de error de red\n        }\n    });\n    \n}\n\nconst reqHandlerLoadITP = (xhr) => {\n    if(xhr.status == 200){\n        let response = JSON.parse(xhr.responseText);\n        if(response.errorcode){\n            displayException(response.message);\n        }else{\n            Templates.render('block_itp/itp', response).then((html,js) => {\n                const content=document.querySelector('.itp');\n                content.innerHTML=\"\";\n                Templates.appendNodeContents('.itp',html,js);\n\n                const token = document.querySelector('input[name=\"token\"]').value;\n                const email = document.querySelector('input[name=\"email\"]').value;\n                const compacted = document.querySelector('#id_compacted').value;\n                const orderby = document.querySelector('input[name=\"orderby\"]');\n                const order = document.querySelector('input[name=\"order\"]');\n                \n                //Definir el evento para el cambio de orden justo después de renderizar la tabla\n                document.querySelectorAll('thead a').forEach((element) => {\n                    element.addEventListener('click', (ev) => {\n                        ev.preventDefault();\n                        if (ev.target.dataset.activo==='activo'){\n                            if (order.value === '1'){\n                                order.value = '0';\n                            }else{\n                                order.value = '1';\n                            }\n                        } else {\n                            orderby.value = ev.target.dataset.orderby;\n                            order.value = '1';\n                        }\n                        loadITPDataFromServer(token, email, orderby.value, order.value, compacted);\n                    });\n                });\n\n                //Definir el evento para mostrar el assessment\n                const linkass=document.querySelectorAll('.linkass');\n\n                linkass.forEach((link)=>{\n                    link.addEventListener('click',showAssessmentList);\n                });\n\n\n                //Definir el evento para mostrar el attendance\n                const linkatt=document.querySelectorAll('.linkatt');\n\n                linkatt.forEach((link)=>{\n                    link.addEventListener('click',showAttendanceList);\n                });\n\n                // Emitir evento personalizado después de actualizar los datos\n                const event = new CustomEvent('itpDataUpdated');\n                document.dispatchEvent(event);\n                \n            });\n        }\n    }else{\n        displayException('Error al cargar la información');\n    }\n}\n\nconst rejectAnswer = (xhr) => {\n    displayException('Error al cargar la información');\n}\n\n// Función para verificar que todos los elementos seleccionados estén cargados\nconst areElementsLoaded = (selector) => {\n    return new Promise((resolve) => {\n        const checkElements = () => {\n            const elements = document.querySelectorAll(selector);\n            if (elements.length > 0 && Array.from(elements).every(elem => elem !== null)) {\n                resolve(elements);\n            } else {\n                requestAnimationFrame(checkElements);\n            }\n        };\n        checkElements();\n    });\n};\n\n\nconst showAssessmentList = (ev) => {\n    ev.preventDefault();\n    const courseid=ev.target.dataset.courseid;\n    const token = document.querySelector('input[name=\"token\"]').value;\n    const email = document.querySelector('input[name=\"email\"]').value;\n    const xhr = new XMLHttpRequest();\n    const formData= new FormData();\n    formData.append('wstoken',token);\n    formData.append('wsfunction','block_itp_get_assessment_details');\n    formData.append('moodlewsrestformat','json');\n    formData.append('params[0][courseid]',courseid);\n    formData.append('params[0][email]',email);\n    xhr.open('POST',url,true);\n    \n    xhr.send(formData);\n    xhr.onload = (event) =>{\n        onLoadAssessmentFunction(xhr);\n        };\n    xhr.onprogress = (event)=>{\n        onProgressFunction(event);\n    } \n    xhr.onerror = function() {\n        window.console.log(\"Solicitud fallida\");\n    };\n    \n}\n\nconst showAttendanceList = (ev) => {\n    ev.preventDefault();\n    const courseid=ev.target.dataset.courseid;\n    const token = document.querySelector('input[name=\"token\"]').value;\n    const email = document.querySelector('input[name=\"email\"]').value;\n    const startdate=ev.target.dataset.startdate;\n    const enddate=ev.target.dataset.enddate;\n    const xhr = new XMLHttpRequest();\n    const formData= new FormData();\n    formData.append('wstoken',token);\n    formData.append('wsfunction','block_itp_get_daily_attendance');\n    formData.append('moodlewsrestformat','json');\n    formData.append('params[0][courseid]',courseid);\n    formData.append('params[0][email]',email);\n    formData.append('params[0][startdate]',startdate);\n    formData.append('params[0][enddate]',enddate);\n    xhr.open('POST',url,true);\n    \n    xhr.send(formData);\n    xhr.onload = (event) =>{\n        onLoadAttendanceFunction(xhr);\n        };\n    xhr.onprogress = (event)=>{\n        onProgressFunction(event);\n    } \n    xhr.onerror = function() {\n        window.console.log(\"Solicitud fallida\");\n    };\n    \n}\n\nconst onLoadAttendanceFunction = (xhr) => {\n    if(xhr.status == 200 || xhr.readyState == 4){\n        let response = JSON.parse(xhr.responseText);\n       \n        if(response.errorcode){\n            displayException(response.message);\n        }else{\n            \n            Templates.render('block_itp/attendance', response).then((html) => {\n                document.querySelector('.itp').innerHTML = html;\n\n                //Definir el evento del botón de retroceso\n                let boback=document.querySelector('.back');\n                boback.addEventListener('click',(e)=>{\n                    e.preventDefault();\n                    //Se obtienen los valores de los campos necesarios\n                    const token = document.querySelector('input[name=\"token\"]').value;\n                    const email = document.querySelector('input[name=\"email\"]').value;\n                    const compacted = document.querySelector('#id_compacted').value;\n                    const orderby = document.querySelector('input[name=\"orderby\"]').value;\n                    const order = document.querySelector('input[name=\"order\"]').value;\n\n                    // Continuar con la carga de datos\n                    loadITPDataFromServer(token, email, orderby, order, compacted);\n                });\n            });\n\n            \n        }\n    }else{\n        displayException('Error al cargar la información');\n    }\n}\n\nconst onLoadAssessmentFunction = (xhr) => {\n    if(xhr.status == 200 || xhr.readyState == 4){\n        let response = JSON.parse(xhr.responseText);\n        \n        if(response.errorcode){\n            displayException(response.message);\n        }else{\n            \n            Templates.render('block_itp/assessment', response).then((html) => {\n                document.querySelector('.itp').innerHTML = html;\n\n                //Definir el evento del botón de retroceso\n                let boback=document.querySelector('.back');\n                boback.addEventListener('click',(e)=>{\n                    e.preventDefault();\n                    //Se obtienen los valores de los campos necesarios\n                    const token = document.querySelector('input[name=\"token\"]').value;\n                    const email = document.querySelector('input[name=\"email\"]').value;\n                    const compacted = document.querySelector('#id_compacted').value;\n                    const orderby = document.querySelector('input[name=\"orderby\"]').value;\n                    const order = document.querySelector('input[name=\"order\"]').value;\n\n                    // Continuar con la carga de datos\n                    loadITPDataFromServer(token, email, orderby, order, compacted);\n                });\n            });\n\n            \n        }\n    }else{\n        displayException('Error al cargar la información');\n    }\n}\n\nconst onProgressFunction= (event)=>{\n    if (event.lengthComputable) {\n      window.console.log(`Recibidos ${event.loaded} de ${event.total} bytes`);\n    } else {\n      window.console.log(`Recibidos ${event.loaded} bytes`); // sin Content-Length\n    }\n}\n\nconst reload=(elem)=>{\n    const container = elem;\n    if (container!==null){\n        container.setAttribute('data-value',(list_trainees.length===0)?'':response[0].email);\n        const span=document.createElement('span');\n        span.setAttribute('aria-hidden',true);\n        span.textContent=\"× \"\n        container.innerHTML=\"\";\n        container.appendChild(span);\n        container.innerHTML+= selectedTrainee.groupname+\"_\"+selectedTrainee.billid+\" \"+selectedTrainee.firstname+\", \"+selectedTrainee.lastname;\n    } \n    const content = container.innerHTML;\n    container.innerHTML= content; \n    \n   //this line is to watch the result in console , you can remove it later\t\n    console.log(\"Refreshed\"); \n\n}"],"names":["url","M","cfg","wwwroot","areElementsLoaded","then","elements","token","document","querySelector","value","compacted","orderby","order","list_trainees","email","group","selectedIndex","options","loadITPDataFromServer","addEventListener","ev","target","compactedUpdated","customer","groupname","text","actualizarDesplegable","actualizarDesplegableGrupos","Promise","resolve","reject","xhr","XMLHttpRequest","formData","FormData","append","open","send","onload","status","reqHandlerCustomerChangeEvent","rejectAnswer","onerror","response","JSON","parse","responseText","selGroup","innerHTML","forEach","option","createElement","id","textContent","name","appendChild","role","reqHandlerGroupChangeEvent","selTrainees","user","billid","firstname","lastname","activeSpan","selectedTrainee","undefined","setAttribute","length","span","reqHandlerLoadITP","errorcode","message","render","html","js","appendNodeContents","querySelectorAll","element","preventDefault","dataset","activo","link","showAssessmentList","showAttendanceList","event","CustomEvent","dispatchEvent","selector","checkElements","Array","from","every","elem","requestAnimationFrame","courseid","onLoadAssessmentFunction","onprogress","onProgressFunction","window","console","log","startdate","enddate","onLoadAttendanceFunction","readyState","e","lengthComputable","loaded","total"],"mappings":"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"}